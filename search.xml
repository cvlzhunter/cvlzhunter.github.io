<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[常用谷歌插件]]></title>
    <url>%2Fcommon-google-extensions.html</url>
    <content type="text"><![CDATA[介绍一些常用的谷歌插件，未完待续~ 常用谷歌插件谷歌插件下载网站 网站 网址 插件网 http://www.cnplugins.com Crx4Chrome https://www.crx4chrome.com Chrome 网上应用店 https://chrome.google.com/webstore/category/extensions 由于一些原因，国内可以使用前两个网站下载，当然 Chrome 网上应用店肯定是最好最全的！ Tampermonkey Tampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器，适用于 Chrome， Microsoft Edge，Safari，Opera Next 和 Firefox。 官方网站：http://www.tampermonkey.net 插件网址：https://greasyfork.org/zh-CN/scripts 个人常用脚本： 插件效果图： Momentum Momentum 是一款自动更换壁纸，自带时钟、TODO 等可自定义功能的用于替换默认标签页的插件。 官方网站：https://momentumdash.com 插件效果图： 以上是设置 Momentum 为默认标签页的效果，个人只保留了 Quote，看起来还不错~ 简悦 SimpRead 简悦 SimpRead：还原一个干净的阅读空间，提升你的阅读体验。 官方网站：http://ksria.com/simpread 文章优化前： 文章优化后： 去除了界面多余元素，更加专注内容本身，这个插件十分强大，对于大部分的网站都已经适配优化，对于未适配的网站可以选择“聚焦模式”，同样可以达到很好的阅读效果。当然你有精力也可以自定义样式，SimpRead 同时支持各类文件导出，也支持保存到笔记或者网盘里，其实还有很多功能，等待各位自行挖掘~ Octotree Octotree：Navigate code on GitHub with ease。能让你以树形的方式显示 GitHub 项目的目录结构。 官方网站：https://www.octotree.io 插件效果图： 插件启用后，当你打开 Github 项目左侧会显示侧边栏，你可以在这自由跳转你想查看的文件。公开的项目可以直接浏览项目目录结构，私密的项目则需要配置 token。 划词翻译 划词翻译：支持谷歌、百度、有道三大翻译和朗读引擎，可以方便的查看、复制和朗读不同引擎的翻译结果。 Github 开源地址：https://github.com/Selection-Translator/crx-selection-translate 访问外文网站必备，简单快捷，英语水平好的当没看见~ 未完待续]]></content>
      <categories>
        <category>chrome</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git-tutorial]]></title>
    <url>%2Fgit-tutorial.html</url>
    <content type="text"><![CDATA[博客荒废了好几年，心血来潮使用 github 重新建了一个小站，访问速度还是有点慢，凑合着吧，反正也不一定经常更新 ๑乛◡乛๑，这篇文章是很早的笔记，刚建站没啥东西就放上来了。 git - 知识结构图 git - 相关学习 Git起步 常用版本管理工具对比 Git中文教程 廖雪峰Git教程 Pro Git Book git - 基本命令新建代码库12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 从远程库克隆项目$ git clone [url] git 配置123456789101112131415# Git的配置文件为.gitconfig，可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config [--global] -e # 配置全局用户名和邮箱$ git config --global user.name "github's Name"$ git config --global user.email "github@xx.com"# 配置项目用户名和邮箱$ git config user.name "gitlab's Name"$ git config user.email "gitlab@xx.com" 增加/删除文件123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... -m [message] 分支123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 列出所有本地分支$ git branch# 列出所有远程分支$ git remote / git branch -r# 列出所有本地分支和远程分支$ git branch -a# 列出所有本地分支详细信息$ git branch -v# 列出所有远程分支详细信息$ git remote -v / git branch -rv# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 查看信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# 显示当前状态$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的信息$ git log --stat# 显示最近两次提交的内容差异$ git log -p -n# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示最近n次提交历史$ git log -n --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat "@&#123;0 day ago&#125;"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 远程同步1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 撤销123456789101112131415161718192021222324252627282930313233343536373839404142434445# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 将当前工作现场储藏$ git stash# 查看储藏的工作现场$ git stash --list# 将当前工作现场储藏$ git stash# 删除stash$ git stash drop# 恢复工作现场，不删除stash$ git stash apply# 恢复工作现场，并删除stash$ git stash pop 其他命令12345678# 生成一个可供发布的压缩包$ git archive# 设置SSH KEY$ ssh-keygen -t rsa -C "youremail@example.com"# 配置命令别名$ git config --global alias.xx 'xxx']]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
